- Separate the solution into multiple sub-projects. "Core", "Graphics", "Physics", "Audio", "Runtime" etc.
- Refactor the existing code.
	- Maybe rename "Game" to "Engine"
	- Separate game-specific code to own project immediately
	- Then! No statics or globals whatsoever at the "base-layer"
	- Implement multiple "layers". For example, "InputManager" is at the base-level, and "Input::" namespace (possibly class? Don't want any globals!) is one layer higher.
	- Wrap all platform/library specific stuff into interfaces. For example, "IGameWindow" which is platform independent (no GLFW etc dependency), of which "GameWindowGLFW" inherits from.
	- Wrap all platform specific stuff creation into their own functions/factories. For example, "IGameWindow::CreateWindow(string title)" returns, depending on platform, GameWindowGLFW or something else
	- ?? Use some pre-processor defines. Or, basically just "OPENGL" ?? (might be overkill)
	- Implement PIMPL if necessary (http://en.wikibooks.org/wiki/C%2B%2B_Programming/Idioms#Pointer_To_Implementation_.28pImpl.29). Not on every class obviously, but on some (bigger) classes if needed
	- Modules!