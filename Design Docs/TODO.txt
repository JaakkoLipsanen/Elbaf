- The engine is semi-"multi-layered", there is first the library layer (OpenGL, D3D, GLFW etc), then is the 'low-level module' -layer (GraphicsModule, InputModule) and then high-level wrapper classes/namespaces (Input, Screen, Cursor etc)

-- TODO: MODULES --

-- GENERAL --

- High level helper classes: Input, Screen, Time, (Game?), (Resources/Content?)
- Okei.. Kaikki luokat, jotka riippuu jostain ei-cross-platform kirjastosta (OpenGL, Direct3D, GLFW jne) omaan namespaceen! 
	- OpenGL -> namespace OGL
	- Direct3D -> namespace D3D
	- GLFW (input jne?) -> namespace OGL(? tai sit ehk joku muu, 'GLFW' ei vaan oikeen voi käyttää kun se vähän epäselvä et onks se mun namespace vs GLFW:n oma namespace);
	
-- TODO --
- All graphics resources created by GraphicsDevice. DO THIS!! (graphicsDevice->CreateTexture(....), graphicsDevice->CreateVertexBuffer(...))
- Maybe modules should not be interfaces/abstract. Module == complete class, but contains a "Module Implementation" or something. I think that this is a good idea.
- IGraphicsResource? meh?
- Make all classes usable from the constructor? So Initialize doesn't do anything... or...?
- Make all appropiate classes non-copyable?

- Meh... Compile-time type deduction (using #if and typedefs)... It's possible and would be great, but the problem is that how should I make implementations to have at least partially their own API?
  Only way to make it would be that every platform implements the header themselves, but that's just stupid.. This is really hard choice...
  This would result a cleaner API (subjective) and it'd be more "correct" (no way to ie define own ITexture and shoot yourself in the leg). For now, scrap this
  
-- HAPPENED BEFORE: --
- I really fucking over-engineered the Input module

-- MODULE DEPENDENCIES --

Content -> Math, Graphics, Diagnostics, Core (libpng)
Core -> Diagnostics, MATH
Diagnostics -> ...
Engine -> Math, Input, Graphics, Diagnostics, Core, (glfw, glm). TODO: Get rid of glfw requirement :((
Graphics -> Math, Diagnostics, Core, (glm, glfw, glfw)
Input -> Core, Diagnostics, Math (glfw). TODO: Get rid of GLFW? That would require another input library.
Math -> Diagnostics



-- DESIGN --

- SINGLETON/GLOBAALIT -

Okei.. Aluksi, hyväksyn sellaiset globaalit funktiot/Singletonit, jotka eivät ole gameplay systeemejä (esim Time, Input, Graphics on hyväksyttäviä). Hyväksyn myös sellaiset singleton gameplay systeemit,
missä Singletonit ovat read-onlyjä, eli niiden avulla ei voi muokata statea. HUOM! Koita myös näissä "ei gameplay-systeemi" singletoneissa välttää statea muuttavia funktioita.


 -- TODO --
 
 
- Font Rendering & Loading (FreeType seems good http://www.freetype.org/freetype2 )
 - CBES/Scene: Maybe put this into Engine?
- 3D Model loading, Audio loading, Font loading
- Content Management? Like keeping track of textures and shaders etc?
- FSL (Flai Shader Language - language that compiles into both GLSL and HLSL. Not supposed to be feature-complete or uber performant. This should be very interesting).
- Physics (Havok/Bullet/box2D? Should I separate Physics2D and Physics to different modules?)
- Audio (FMod or OpenAL something?)
- AI (Behaviour Trees etc)



TODO: 
3.10: Font Rendering & Loading